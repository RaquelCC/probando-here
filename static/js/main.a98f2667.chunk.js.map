{"version":3,"sources":["components/Map.js","components/ThemeSelector.js","components/GeocoordinateGetter.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","platform","map","state","app_id","app_code","useHTTPS","center","lat","lng","zoom","theme","style","changeTheme","layer","getMapTileService","type","createTileLayer","setBaseLayer","window","H","service","Platform","createDefaultLayers","container","refs","normal","events","mapevents","MapEvents","Behavior","ui","UI","createDefault","_this2","startingPoint","endingPoint","console","log","routeLine","removeObjects","startMarker","endMarker","routingParameters","mode","waypoint0","long","waypoint1","representation","onResult","result","route","routeShape","startPoint","endPoint","linestring","response","shape","geo","LineString","forEach","point","parts","split","pushLatLngAlt","waypoint","mappedPosition","Polyline","strokeColor","lineWidth","Marker","latitude","longitude","addObjects","setViewBounds","getBounds","router","getRoutingService","calculateRoute","error","alert","message","react_default","a","createElement","ref","width","height","background","React","Component","ThemeSelector","thumbnails","onChange","push","key","onClick","id","GeocoordinateGetter","start","end","handleChangeInput","bind","assertThisInitialized","handleChangeInput2","e","setState","objectSpread","target","value","placeholder","getCoordinates","App","navigator","geolocation","getCurrentPosition","position","coords","evt","preventDefault","change","fetch","then","data","json","Response","View","Result","Location","NavigationPosition","Latitude","Longitude","address","Address","Label","summary","routeSummary","className","Map_Map","ThemeSelector_ThemeSelector","GeocoordinateGetter_GeocoordinateGetter","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a98f2667.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.platform = null;\r\n    this.map = null;\r\n\r\n    this.state = {\r\n      app_id: props.app_id,\r\n      app_code: props.app_code,\r\n      useHTTPS: true,\r\n      // useCIT: true,\r\n      center: {\r\n        lat: props.lat,\r\n        lng: props.lng,\r\n      },\r\n      zoom: props.zoom,\r\n      theme: props.theme,\r\n      style: props.style,\r\n    }\r\n  }\r\n\r\n\r\n  shouldComponentUpdate(props, state) {\r\n    this.changeTheme(props.theme, props.style);\r\n    return true;\r\n  }\r\n\r\n  changeTheme(theme, style) {\r\n    var tiles = this.platform.getMapTileService({ 'type': 'base' });\r\n    var layer = tiles.createTileLayer(\r\n      'maptile',\r\n      theme,\r\n      256,\r\n      'png',\r\n      { 'style': style }\r\n    );\r\n    this.map.setBaseLayer(layer);\r\n  }\r\n\r\n\r\n\r\n  // TODO: Add theme selection discussed later HERE\r\n\r\n  componentDidMount() {\r\n\r\n    this.platform = new window.H.service.Platform(this.state);\r\n\r\n    var layer = this.platform.createDefaultLayers();\r\n    var container = this.refs[\"here-map\"];\r\n\r\n    this.map = new window.H.Map(container, layer.normal.map, {\r\n      center: this.state.center,\r\n      zoom: this.state.zoom,\r\n    })\r\n\r\n    var events = new window.H.mapevents.MapEvents(this.map);\r\n    // eslint-disable-next-line\r\n    var behavior = new window.H.mapevents.Behavior(events);\r\n    // eslint-disable-next-line\r\n    var ui = new window.H.ui.UI.createDefault(this.map, layer)\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.startingPoint && this.props.endingPoint) {\r\n      console.log(\"props!\")\r\n      if (this.routeLine) {\r\n        this.map.removeObjects([this.routeLine, this.startMarker, this.endMarker]);\r\n      }\r\n      this.routingParameters = {\r\n        // The routing mode:\r\n        'mode': 'fastest;pedestrian',\r\n        // The start point of the route:\r\n        'waypoint0': /*'geo!-33.417442,-70.6057'*/\"geo!\" + this.props.startingPoint.lat + \",\" + this.props.startingPoint.long,\r\n        // The end point of the route:\r\n        'waypoint1': /*'geo!-33.454103,-70.688219'*/\"geo!\" + this.props.endingPoint.lat + \",\" + this.props.endingPoint.long,\r\n        // To retrieve the shape of the route we choose the route\r\n        // representation mode 'display'\r\n        'representation': 'display'\r\n      };\r\n\r\n      console.log(this.routingParameters)\r\n\r\n      // Define a callback function to process the routing response:\r\n      this.onResult = result => {\r\n        console.log(result)\r\n        var route,\r\n          routeShape,\r\n          startPoint,\r\n          endPoint,\r\n          linestring;\r\n        if (result.response && result.response.route) {\r\n          // Pick the first route from the response:\r\n          route = result.response.route[0];\r\n          // Pick the route's shape:\r\n          routeShape = route.shape;\r\n\r\n          // Create a linestring to use as a point source for the route line\r\n          linestring = new window.H.geo.LineString();\r\n\r\n          // Push all the points in the shape into the linestring:\r\n          routeShape.forEach(function (point) {\r\n            var parts = point.split(',');\r\n            linestring.pushLatLngAlt(parts[0], parts[1]);\r\n          });\r\n\r\n          // Retrieve the mapped positions of the requested waypoints:\r\n          startPoint = route.waypoint[0].mappedPosition;\r\n          endPoint = route.waypoint[1].mappedPosition;\r\n\r\n          // Create a polyline to display the route:\r\n          this.routeLine = new window.H.map.Polyline(linestring, {\r\n            style: { strokeColor: 'blue', lineWidth: 2 }\r\n          });\r\n\r\n          // Create a marker for the start point:\r\n          this.startMarker = new window.H.map.Marker({\r\n            lat: startPoint.latitude,\r\n            lng: startPoint.longitude\r\n          });\r\n\r\n          // Create a marker for the end point:\r\n          this.endMarker = new window.H.map.Marker({\r\n            lat: endPoint.latitude,\r\n            lng: endPoint.longitude\r\n          });\r\n\r\n          // Add the route polyline and the two markers to the map:\r\n          this.map.addObjects([this.routeLine, this.startMarker, this.endMarker]);\r\n\r\n          // Set the map's viewport to make the whole route visible:\r\n          this.map.setViewBounds(this.routeLine.getBounds());\r\n        }\r\n      };\r\n\r\n      // Get an instance of the routing service:\r\n      this.router = this.platform.getRoutingService();\r\n\r\n      // Call calculateRoute() with the routing parameters,\r\n      // the callback and an error callback function (called if a\r\n      // communication error occurs):\r\n      this.router.calculateRoute(this.routingParameters, this.onResult,\r\n        function (error) {\r\n          alert(error.message);\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref=\"here-map\" style={{ width: '100%', height: '400px', background: 'grey' }} />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ThemeSelector extends React.Component {\r\n    render() {\r\n        var themes = [\r\n            'normal.day',\r\n            'normal.day.grey',\r\n            'normal.day.transit',\r\n            'normal.night',\r\n            'normal.night.grey',\r\n            'reduced.night',\r\n            'reduced.day',\r\n            'pedestrian.day',\r\n            'pedestrian.night',\r\n        ];\r\n\r\n        var thumbnails = [];\r\n        var onChange = this.props.changeTheme;\r\n        themes.forEach(function(theme) {\r\n            thumbnails.push(<button key={ theme } onClick= { onChange } id={ theme }>{ theme }</button>);\r\n        });\r\n\r\n        return (\r\n            <div>\r\n            { thumbnails }\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class GeocoordinateGetter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: '',\r\n            end: ''\r\n        }\r\n        \r\n        this.handleChangeInput = this.handleChangeInput.bind(this);\r\n        this.handleChangeInput2 = this.handleChangeInput2.bind(this);\r\n\r\n    }\r\n\r\n    handleChangeInput(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            start: e.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeInput2(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            end: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input onChange={(e) => this.handleChangeInput(e)} value={this.state.start} placeholder=\"inicio recorrido\"></input>\r\n                <input onChange={(e) => this.handleChangeInput2(e)} value={this.state.end} placeholder=\"final recorrido\"></input>\r\n                <button onClick={() => this.props.getCoordinates(this.state.start, this.state.end)}>Planificar</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Map from './components/Map';\nimport ThemeSelector from './components/ThemeSelector';\nimport GeocoordinateGetter from './components/GeocoordinateGetter';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      app_id: \"aNF8XAILH0I6wrjlttyu\",\n      app_code: \"x5U_rooRVBrH10t0UyX4Sw\",\n      theme: 'normal.day',\n      startingPoint: {\n        lat: '',\n        long: '',\n      },\n      endingPoint: {\n        lat: '',\n        long: '',\n      },\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      console.log(navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState({\n            lat: position.coords.latitude, \n            long: position.coords.longitude,\n            error: null,\n          });\n        },\n        (error) => {\n          // alert(error.message)\n          this.setState(\n          {error: error.message}\n          )\n        }\n      );\n    }\n  }\n\n  onChange(evt) {\n    evt.preventDefault();\n\n    var change = evt.target.id;\n    this.setState({\n      \"theme\": change,\n    });\n  }\n\n  async getCoordinates(start, end) {\n    this.startingPoint = await fetch(\"https://geocoder.api.here.com/6.2/geocode.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&searchtext=\" + start)\n      .then(data => data.json())\n      .then(data => {\n        return {\n          lat: data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n          long: data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n          address: data.Response.View[0].Result[0].Location.Address.Label,\n        }\n      })\n    this.endingPoint = await fetch(\"https://geocoder.api.here.com/6.2/geocode.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&searchtext=\" + end)\n      .then(data => data.json())\n      .then(data => {\n        return {\n          lat: data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n          long: data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n          address: data.Response.View[0].Result[0].Location.Address.Label,\n        }\n      })\n\n    this.routeSummary = await fetch(\"https://route.api.here.com/routing/7.2/calculateroute.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&waypoint0=geo!\" + this.startingPoint.lat + \",\" + this.startingPoint.long + \"&waypoint1=geo!\" + this.endingPoint.lat + \",\" + this.endingPoint.long + \"&mode=fastest;pedestrian;traffic:disabled\")\n      .then(data => data.json())\n      .then(data => {\n        // console.log(\"https://route.api.here.com/routing/7.2/calculateroute.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&waypoint0=geo!\" + this.startingPoint.lat + \",\" + this.startingPoint.long + \"&waypoint1=geo!\" + this.endingPoint.lat + \",\" + this.endingPoint.long + \"&mode=fastest;pedestrian;traffic:disabled\")\n        // console.log(data)\n        return data.response.route[0].summary\n      })\n\n    this.setState({\n      ...this.state,\n      startingPoint: {\n        ...this.startingPoint\n        // lat: this.startingPoint.data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n        // long: this.startingPoint.data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n        // address: this.startingPoint.data.Response.View[0].Result[0].Location.Address.Label,\n      },\n      endingPoint: {\n        ...this.endingPoint\n        // lat: this.endingPoint.data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n        // long: this.endingPoint.data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n        // address: this.endingPoint.data.Response.View[0].Result[0].Location.Address.Label,\n      },\n      routeSummary: this.routeSummary\n    })\n\n\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Map\n          app_id={this.state.app_id}\n          app_code={this.state.app_code}\n          lat=\"-33.4489\"\n          lng=\"-70.6693\"\n          zoom=\"12\"\n          theme={this.state.theme}\n          startingPoint={this.state.startingPoint}\n          endingPoint={this.state.endingPoint}\n        />\n        <ThemeSelector changeTheme={this.onChange} />\n        <GeocoordinateGetter\n          getCoordinates={this.getCoordinates}\n        />\n\n        <div>{this.state.lat ? this.state.lat : \"nada\"}</div>\n        <div>{this.state.long ? this.state.long : \"nada\"}</div>\n\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}